Make paths more configurable

From: Moritz 'Morty' Str√ºbe <morty@gmx.net>


---
 tools/cooja/java/se/sics/cooja/GUI.java |  130 ++++++++-----------------------
 1 file changed, 34 insertions(+), 96 deletions(-)

diff --git a/tools/cooja/java/se/sics/cooja/GUI.java b/tools/cooja/java/se/sics/cooja/GUI.java
index 2d57a42..49b65ae 100644
--- a/tools/cooja/java/se/sics/cooja/GUI.java
+++ b/tools/cooja/java/se/sics/cooja/GUI.java
@@ -247,7 +247,7 @@ public class GUI extends Observable {
   public static Properties currentExternalToolsSettings;
 
   private static final String externalToolsSettingNames[] = new String[] {
-    "PATH_CONTIKI", "PATH_COOJA_CORE_RELATIVE","PATH_COOJA","PATH_APPS",
+    "PATH_CONTIKI", "PATH_COOJA_CORE_RELATIVE", "PATH_COOJA", "PATH_APPS",
     "PATH_APPSEARCH",
 
     "PATH_MAKE",
@@ -427,20 +427,6 @@ public class GUI extends Observable {
         currentProjects.add(new COOJAProject(projectDir));
       }
     }
-    
-    //Scan for projects
-    String searchProjectDirs = getExternalToolsSetting("PATH_APPSEARCH", null);
-    if (searchProjectDirs != null && searchProjectDirs.length() > 0) {
-      String[] arr = searchProjectDirs.split(";");
-      for (String d : arr) {
-    	  File searchDir = restorePortablePath(new File(d));
-    	  File[] projects = COOJAProject.sarchProjects(searchDir, 3);
-    	  if(projects == null) continue;
-    	  for(File p : projects){
-    		  currentProjects.add(new COOJAProject(p));
-    	  }
-      }
-    }
 
     /* Parse current extension configuration */
     try {
@@ -4140,99 +4126,52 @@ public class GUI extends Observable {
     return file;
   }
 
-  private final static String[][] PATH_IDENTIFIER = {
-	  {"[CONTIKI_DIR]","PATH_CONTIKI",""},
-	  {"[COOJA_DIR]","PATH_COOJA","/tools/cooja"},
-	  {"[APPS_DIR]","PATH_APPS","/tools/cooja/apps"}
-  };
-  
+  private final static String PATH_CONTIKI_IDENTIFIER = "[CONTIKI_DIR]";
   private File createContikiRelativePath(File file) {
     try {
-    	int elem = PATH_IDENTIFIER.length;
-    	File path[] = new File [elem];
-    	String canonicals[] = new String[elem];
-    	int match = -1;
-    	int mlength = 0;
-    	String fileCanonical = file.getCanonicalPath();
-      
-    	//No so nice, but goes along with GUI.getExternalToolsSetting
-    	String defp = GUI.getExternalToolsSetting("PATH_CONTIKI", null);
-    	
-    	
-		for(int i = 0; i < elem; i++){
-			path[i] = new File(GUI.getExternalToolsSetting(PATH_IDENTIFIER[i][1], defp + PATH_IDENTIFIER[i][2]));			
-			canonicals[i] = path[i].getCanonicalPath();
-			if (fileCanonical.startsWith(canonicals[i])){
-				if(mlength < canonicals[i].length()){
-					mlength = canonicals[i].length();
-					match = i;
-				}
- 
-	    	}
-		}
-      
-	    if(match == -1) return null;
+      File contikiPath = new File(GUI.getExternalToolsSetting("PATH_CONTIKI", null));
+      String contikiCanonical = contikiPath.getCanonicalPath();
 
+      String fileCanonical = file.getCanonicalPath();
+      if (!fileCanonical.startsWith(contikiCanonical)) {
+        /* File is not in a Contiki subdirectory */
+        /*logger.info("File is not in a Contiki subdirectory: " + file.getAbsolutePath());*/
+        return null;
+      }
 
-	    /* Replace Contiki's canonical path with Contiki identifier */
-        String portablePath = fileCanonical.replaceFirst(
-          java.util.regex.Matcher.quoteReplacement(canonicals[match]), 
-          java.util.regex.Matcher.quoteReplacement(PATH_IDENTIFIER[match][0]));
-        File portable = new File(portablePath);
-      
-        /* Verify conversion */
-        File verify = restoreContikiRelativePath(portable);
-        if (verify == null || !verify.exists()) {
-        	/* Error: did file even exist pre-conversion? */
-        	return null;
-        }
+      /* Replace Contiki's canonical path with Contiki identifier */
+      String portablePath = fileCanonical.replaceFirst(
+          java.util.regex.Matcher.quoteReplacement(contikiCanonical),
+          java.util.regex.Matcher.quoteReplacement(PATH_CONTIKI_IDENTIFIER));
+      File portable = new File(portablePath);
 
-        return portable;
+      /* Verify conversion */
+      File verify = restoreContikiRelativePath(portable);
+      if (verify == null || !verify.exists()) {
+        /* Error: did file even exist pre-conversion? */
+        return null;
+      }
+
+      return portable;
     } catch (IOException e1) {
       /*logger.warn("Error when converting to Contiki relative path: " + e1.getMessage());*/
       return null;
     }
   }
-  
-  
   private File restoreContikiRelativePath(File portable) {
-  	int elem = PATH_IDENTIFIER.length;
-  	File path = null;
-	String canonical = null;
-	
     try {
-    	    	
-    	String portablePath = portable.getPath();
-    	
-        int i = 0;
-        //logger.info("PPATH: " + portablePath);
-        
-    	for(; i < elem; i++){
-    		if (portablePath.startsWith(PATH_IDENTIFIER[i][0])) break;
-    		
-    	}
-    	
-    	
-    	if(i == elem) return null;
-    	//logger.info("Found: " + PATH_IDENTIFIER[i][0]);
-    	
-    	//No so nice, but goes along with GUI.getExternalToolsSetting
-    	String defp = GUI.getExternalToolsSetting("PATH_CONTIKI", null);
-    	path = new File(GUI.getExternalToolsSetting(PATH_IDENTIFIER[i][1], defp + PATH_IDENTIFIER[i][2]));
-    	
-    	//logger.info("Config: " + PATH_IDENTIFIER[i][1] + ", " + defp + PATH_IDENTIFIER[i][2] + " = " + path.toString());
-		canonical = path.getCanonicalPath();
-    	
-		
-    	File absolute = new File(portablePath.replace(PATH_IDENTIFIER[i][0], canonical));
-		if(!absolute.exists()){
-			logger.warn("Replaced " + portable  + " with " + absolute.toString() + " (default: "+ defp + PATH_IDENTIFIER[i][2] +"), but could not find it. This does not have to be an error, as the file might be created later.");
-		}
-    	     
-      
-    	return absolute;
+      File contikiPath = new File(GUI.getExternalToolsSetting("PATH_CONTIKI", null));
+      String contikiCanonical = contikiPath.getCanonicalPath();
+
+      String portablePath = portable.getPath();
+      if (!portablePath.startsWith(PATH_CONTIKI_IDENTIFIER)) {
+        return null;
+      }
+
+      File absolute = new File(portablePath.replace(PATH_CONTIKI_IDENTIFIER, contikiCanonical));
+      return absolute;
     } catch (IOException e) {
-    	return null;
+      return null;
     }
   }
 
@@ -4688,4 +4627,3 @@ public class GUI extends Observable {
   };
 
 }
-
